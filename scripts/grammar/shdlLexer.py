# Generated from shdl.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,162,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,5,18,125,8,18,10,18,12,18,
        128,9,18,1,19,4,19,131,8,19,11,19,12,19,132,1,20,4,20,136,8,20,11,
        20,12,20,137,1,21,4,21,141,8,21,11,21,12,21,142,1,21,1,21,1,22,1,
        22,1,22,1,22,5,22,151,8,22,10,22,12,22,154,9,22,1,22,4,22,157,8,
        22,11,22,12,22,158,1,22,1,22,1,152,0,23,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,1,0,5,2,0,65,90,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,2,0,9,9,32,32,167,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,54,1,0,0,0,5,64,1,
        0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,82,1,0,0,0,13,89,1,0,0,0,15,93,
        1,0,0,0,17,98,1,0,0,0,19,103,1,0,0,0,21,106,1,0,0,0,23,108,1,0,0,
        0,25,110,1,0,0,0,27,112,1,0,0,0,29,114,1,0,0,0,31,116,1,0,0,0,33,
        118,1,0,0,0,35,120,1,0,0,0,37,122,1,0,0,0,39,130,1,0,0,0,41,135,
        1,0,0,0,43,140,1,0,0,0,45,146,1,0,0,0,47,48,5,109,0,0,48,49,5,111,
        0,0,49,50,5,100,0,0,50,51,5,117,0,0,51,52,5,108,0,0,52,53,5,101,
        0,0,53,2,1,0,0,0,54,55,5,101,0,0,55,56,5,110,0,0,56,57,5,100,0,0,
        57,58,5,109,0,0,58,59,5,111,0,0,59,60,5,100,0,0,60,61,5,117,0,0,
        61,62,5,108,0,0,62,63,5,101,0,0,63,4,1,0,0,0,64,65,5,112,0,0,65,
        66,5,97,0,0,66,67,5,114,0,0,67,68,5,97,0,0,68,69,5,109,0,0,69,70,
        5,101,0,0,70,71,5,116,0,0,71,72,5,101,0,0,72,73,5,114,0,0,73,6,1,
        0,0,0,74,75,5,61,0,0,75,8,1,0,0,0,76,77,5,105,0,0,77,78,5,110,0,
        0,78,79,5,112,0,0,79,80,5,117,0,0,80,81,5,116,0,0,81,10,1,0,0,0,
        82,83,5,111,0,0,83,84,5,117,0,0,84,85,5,116,0,0,85,86,5,112,0,0,
        86,87,5,117,0,0,87,88,5,116,0,0,88,12,1,0,0,0,89,90,5,115,0,0,90,
        91,5,105,0,0,91,92,5,110,0,0,92,14,1,0,0,0,93,94,5,115,0,0,94,95,
        5,111,0,0,95,96,5,117,0,0,96,97,5,116,0,0,97,16,1,0,0,0,98,99,5,
        104,0,0,99,100,5,115,0,0,100,101,5,116,0,0,101,102,5,114,0,0,102,
        18,1,0,0,0,103,104,5,45,0,0,104,105,5,62,0,0,105,20,1,0,0,0,106,
        107,5,60,0,0,107,22,1,0,0,0,108,109,5,62,0,0,109,24,1,0,0,0,110,
        111,5,40,0,0,111,26,1,0,0,0,112,113,5,44,0,0,113,28,1,0,0,0,114,
        115,5,41,0,0,115,30,1,0,0,0,116,117,5,46,0,0,117,32,1,0,0,0,118,
        119,5,91,0,0,119,34,1,0,0,0,120,121,5,93,0,0,121,36,1,0,0,0,122,
        126,7,0,0,0,123,125,7,1,0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,
        124,1,0,0,0,126,127,1,0,0,0,127,38,1,0,0,0,128,126,1,0,0,0,129,131,
        7,2,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,
        1,0,0,0,133,40,1,0,0,0,134,136,7,3,0,0,135,134,1,0,0,0,136,137,1,
        0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,42,1,0,0,0,139,141,7,4,
        0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,
        0,0,143,144,1,0,0,0,144,145,6,21,0,0,145,44,1,0,0,0,146,147,5,47,
        0,0,147,148,5,47,0,0,148,152,1,0,0,0,149,151,9,0,0,0,150,149,1,0,
        0,0,151,154,1,0,0,0,152,153,1,0,0,0,152,150,1,0,0,0,153,156,1,0,
        0,0,154,152,1,0,0,0,155,157,7,3,0,0,156,155,1,0,0,0,157,158,1,0,
        0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,6,22,
        0,0,161,46,1,0,0,0,7,0,126,132,137,142,152,158,1,6,0,0
    ]

class shdlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    ID = 19
    INT = 20
    NEWLINE = 21
    WS = 22
    LINE_COMMENT = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'endmodule'", "'parameter'", "'='", "'input'", 
            "'output'", "'sin'", "'sout'", "'hstr'", "'->'", "'<'", "'>'", 
            "'('", "','", "')'", "'.'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "NEWLINE", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "ID", "INT", "NEWLINE", 
                  "WS", "LINE_COMMENT" ]

    grammarFileName = "shdl.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


